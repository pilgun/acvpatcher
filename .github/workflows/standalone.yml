name: Standalone

on:
  release:
    types:
      - created

jobs:
  build:
    strategy:
      matrix:
        target:
          - {"runtime": 'linux-x64', "artifact": "QuestPatcher-linux.zip"}
          - {"runtime": 'win-x64', "artifact": "QuestPatcher-windows.zip"}
          - {"runtime": 'osx-x64', "artifact": "QuestPatcher-osx.zip"}

    runs-on: windows-latest
    name: Build for ${{ matrix.target.runtime }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.204
      - name: Restore dependencies
        run: dotnet restore
      - name: Set version
        if: ${{ github.event_name == 'release' }}
        run: echo ${{ github.event.release.tag_name }} | Out-File -NoNewline -FilePath ./VERSION
      - name: Build ${{ matrix.target.runtime }}
        run: dotnet publish ACVPatcher/ACVPatcher.csproj -r ${{ matrix.target.runtime }} -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -c Release --self-contained
      - name: Copy license
        run: cp LICENSE ACVPatcher/bin/Release/net8.0/${{ matrix.target.runtime }}/publish/LICENSE.txt
      - name: Copy notice
        run: cp NOTICE ACVPatcher/bin/Release/net8.0/${{ matrix.target.runtime }}/publish/NOTICE.txt
      - name: Upload Artifact
        if: ${{ github.event_name != 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.runtime }}
          path: ACVPatcher/bin/Release/net8.0/${{ matrix.target.runtime }}/publish/
      - name: Compress Release Artifact
        if: ${{ github.event_name == 'release' }}
        run: 'Compress-Archive ACVPatcher/bin/Release/net8.0/${{ matrix.target.runtime }}/publish/* ./release.zip'
      - name: Create Release
        if: ${{ github.event_name == 'release' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: ${{ github.event.release.tag_name }}
          draft: false
          prerelease: false
        permissions:
          contents: write
          packages: write
          issues: write
      - name: Upload Release Asset
        if: ${{ github.event_name == 'release' }}
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: ${{ matrix.target.artifact }}
          asset_content_type: application/zip
